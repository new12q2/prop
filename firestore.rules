rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow users to read and write only their own data
      allow read, write: if isOwner(userId);
      
      // Allow creation of new user documents during signup
      allow create: if isAuthenticated() 
                   && request.auth.uid == userId
                   && request.resource.data.keys().hasAll(['email', 'userType', 'phoneNumber', 'createdAt'])
                   && request.resource.data.userType in ['tenant', 'landlord']
                   && request.resource.data.phoneNumber is string
                   && request.resource.data.phoneNumber.size() > 0;
      
      // Additional validation for landlord users
      allow create: if isAuthenticated() 
                   && request.auth.uid == userId
                   && request.resource.data.userType == 'landlord'
                   && request.resource.data.keys().hasAll(['companyName'])
                   && request.resource.data.companyName is string
                   && request.resource.data.companyName.size() > 0;
    }
    
    // Properties collection rules
    match /properties/{propertyId} {
      allow read: if isAuthenticated() && 
                 (resource.data.ownerId == request.auth.uid || 
                  resource.data.tenantId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['location', 'size', 'rent', 'isRented', 'createdAt', 'ownerId']);
      
      allow update: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
    }
    
    // Tenants collection rules
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() && 
                 resource.data.ownerId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['name', 'createdAt', 'ownerId']);
      
      allow update: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
    }

    // Transaction rules with improved validation
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
                 resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['date', 'type', 'property', 'amount', 'status', 'userId']) &&
                   request.resource.data.amount is number;
      
      allow update, delete: if request.auth != null && 
                          resource.data.userId == request.auth.uid;
    }

    // Payments collection rules
    match /payments/{paymentId} {
    allow list, read: if request.auth != null;  // Allow listing and reading of payments
      
      allow create: if request.auth != null && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['date', 'type', 'property', 'amount', 'status', 'ownerId']) &&
                   request.resource.data.amount is number;
      
      allow update, delete: if request.auth != null && 
                          resource.data.ownerId == request.auth.uid;
    }

    // Maintenance collection rules
    match /maintenance/{maintenanceId} {
      allow read: if isAuthenticated() && 
                 (resource.data.ownerId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['title', 'location', 'priority', 'description', 'status', 'createdAt', 'ownerId']);
      
      allow list: if isAuthenticated() && request.auth != null;
      
      allow update: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
    }
    
    // Documents collection rules - simplified for testing
    match /documents/{documentId} {
      allow read, write: if request.auth != null;
    }

    // Activities collection rules
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['type', 'description', 'timestamp', 'ownerId']);
      allow list: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
                          resource.data.ownerId == request.auth.uid;
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated() && 
                 (resource == null || resource.data.ownerId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.keys().hasAll([
                     'title', 'type', 'startDate', 'endDate', 
                     'allDay', 'ownerId', 'description'
                   ]);
      
      allow list: if isAuthenticated() && request.auth != null;
      
      allow update: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.ownerId == request.auth.uid;
    }

    // Collection group query rules
    match /{path=**}/activities1/{docId} {
      allow read: if isAuthenticated() && 
                 (resource == null || resource.data.ownerId == request.auth.uid);
    }

    match /{path=**}/events/{docId} {
      allow read: if isAuthenticated() && 
                 (resource == null || resource.data.ownerId == request.auth.uid);
    }

    match /{path=**}/tenants/{docId} {
      allow read: if isAuthenticated() && 
                 (resource == null || resource.data.ownerId == request.auth.uid);
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Property images storage rules
    match /properties/{userId}/{imageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                  && request.auth.uid == userId
                  && request.resource.size < 5 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
    }

    // Maintenance and document storage rules
    match /storage/{userId}/{type}/{fileId} {
      allow read: if request.auth != null && userId == request.auth.uid;
      allow write: if request.auth != null 
                  && userId == request.auth.uid
                  && (
                    (type == 'maintenance' && 
                     request.resource.size < 5 * 1024 * 1024 && 
                     request.resource.contentType.matches('image/.*')) ||
                    (type == 'documents' && 
                     request.resource.size < 10 * 1024 * 1024 && 
                     request.resource.contentType == 'application/pdf')
                  );
    }

    // Documents storage rules with improved validation
    match /storage/{userId}/documents/{fileName} {
      allow read: if request.auth != null && 
                 userId == request.auth.uid;
      
      allow write: if request.auth != null && 
                  userId == request.auth.uid &&
                  request.resource.size < 10 * 1024 * 1024 && // 10MB limit
                  request.resource.contentType == 'application/pdf';
      
      allow delete: if request.auth != null && 
                   userId == request.auth.uid;
    }
    
    // Default rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
